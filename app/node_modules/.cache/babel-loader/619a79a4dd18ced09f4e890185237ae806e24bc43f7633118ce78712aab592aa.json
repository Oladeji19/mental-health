{"ast":null,"code":"var _jsxFileName = \"/Users/ivan/mental-health/app/src/Registration.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport TwoFactor from \"./Two-Factor.js\";\nimport { Link } from \"react-router-dom\";\nimport { registeredUsers } from \"./RegisteredUsers.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Registration() {\n  _s();\n  {\n    /* State variable for email. */\n  }\n  const addRegisteredUser = async (email, username, password) => {\n    try {\n      const response = await fetch('/register_user', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: emailAddress,\n          username: emailAddress,\n          // Using email as username for simplicity\n          password: password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        console.log('User registered successfully:', data.message);\n        console.log('User ID:', data.user_id);\n        setRegisterMessage(\"Registration successful! You can now login.\");\n        // You might want to redirect the user or update the UI here\n      } else {\n        console.error('Registration failed:', data.error);\n        setRegisterMessage(data.error || \"Registration failed. Please try again.\");\n      }\n    } catch (error) {\n      console.error('An error occurred:', error);\n      setRegisterMessage(\"An error occurred. Please try again later.\");\n    }\n  };\n  const [email, setEmail] = useState(\"\");\n  {\n    /* State variable for email message. */\n  }\n  const [emailMsg, setEmailMsg] = useState(\"Email needs to have a prefix, @, domain and then .edu.\");\n  {\n    /* State variable for two factor. */\n  }\n  const [showTwoFactor, setShowTwoFactor] = useState(\"\");\n  {\n    /* State variable for the new password created. */\n  }\n  const [newPassword, setNewPassword] = useState(\"\");\n  {\n    /* State variable for the new password message. Length needs to be at least 12 characters.  */\n  }\n  const [newPasswordMsg, setNewPasswordMsg] = useState(\"Length needs to be at least 12 characters.\");\n  {\n    /* State variable for the new password message to make sure that it consists of uppercase, lowercase, numbers, and symbols.  */\n  }\n  const [newPasswordMsgCharacters, setNewPasswordMsgCharacters] = useState(\"Needs to contains uppercase and lowercase characters, numbers, and symbols.\");\n  {\n    /* State variable for the confirmed password.  */\n  }\n  const [confirmedPassword, setConfirmedPassword] = useState(\"\");\n  {\n    /* State variable to ensure that the confirmed password is the same as the new password.  */\n  }\n  const [confirmedPasswordMsg, setConfirmedPasswordMsg] = useState(\"Password should be the same as the original.\");\n  {\n    /* State variable for enabling and disabling the button to create the new account assuming that the new password as well as the confirmed password are both the same. */\n  }\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  {\n    /* Register message */\n  }\n  const [registerMessage, setRegisterMessage] = useState(\"\");\n  {\n    /* Uppercase letters */\n  }\n  const uppercase = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n  {\n    /* Lowercase letters */\n  }\n  const lowercase = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  {\n    /* Numbers */\n  }\n  const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  {\n    /* Symbols */\n  }\n  const symbols = [\"@\", \"#\", \"$\", \"%\", \"&\", \"*\", \"!\", \"?\", \"^\", \"~\", \"|\", \"_\", \"+\", \"-\", \"=\", \"<\", \">\", \"×\", \"÷\", \"√\", \"∞\", \"±\", \"≠\", \"≈\", \"∑\", \"∫\", \"π\", \"∆\", \"∂\", \"€\", \"£\", \"¥\", \"₹\", \"₽\", \"₩\", \"₫\", \"₦\", \".\", \",\", \";\", \":\", \"'\", '\"', \"(\", \")\", \"[\", \"]\"];\n  {\n    /* Checks to make sure that the password contains an element from an array. */\n  }\n  function apply(arr, val) {\n    for (let a of arr) {\n      if (val.includes(a)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  {\n    /* Regex expression for ensuring that the email is in the right format. */\n  }\n  function rightFormat(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n  {\n    /* Sets emails to target values. */\n  }\n  const handleEmailChange = event => {\n    setEmail(event.target.value);\n    setEmailMsg(!rightFormat(event.target.value) ? \"Email needs to have a prefix, @, domain and then .edu.\" : \"\");\n  };\n  {\n    /* Updates the new password message for character check and length check as and when the user is adding a new password. */\n  }\n  const handlePasswordChange = event => {\n    {\n      /* Takes in the value. */\n    }\n    const value = event.target.value;\n    {\n      /* Apply function is created for symbols, uppercase, lowercase and numbers. For each apply function, a check happens to make sure that at least one of each: uppercase, lowercase, symbol, and numbers are present. */\n    }\n    const booleans = [apply(symbols, value), apply(uppercase, value), apply(lowercase, value), apply(numbers, value)];\n    {\n      /* Setting the new password, the new password length check message, as well as the new password character check message. */\n    }\n    setNewPassword(value);\n    setNewPasswordMsg(value.length < 12 ? \"Length needs to be at least 12 characters.\" : \"\");\n    setNewPasswordMsgCharacters(booleans.includes(false) ? \"Needs to contains uppercase and lowercase characters, numbers, and symbols.\" : \"\");\n  };\n  const handleConfPasswordChange = event => {\n    {\n      /* Takes in the value. */\n    }\n    const value = event.target.value;\n    {\n      /* Sets the confirmed password and message depending on whether the confirm password is the same as the new password. */\n    }\n    setConfirmedPassword(value);\n    setConfirmedPasswordMsg(value !== newPassword ? \"Password should be the same as the original.\" : \"All set. Have fun.\");\n    console.log(value + \"::\" + newPassword + \"::::\" + value !== newPassword);\n    {\n      /* Enables button if message says \"All set. Have fun.\". Else, keep the button disabled. */\n    }\n    setIsButtonDisabled(value !== newPassword && emailMsg === \"\");\n  };\n  {\n    /* Shows the two factors only if the checkbox has been entered. */\n  }\n  const handleCheckboxChange = event => {\n    setShowTwoFactor(event.target.checked);\n  };\n  {\n    /* Adds a new user to the list of registered users, but does not if they are an existing user. */\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-input\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Create an Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Please create a username and password.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"email\",\n      value: email,\n      onChange: handleEmailChange,\n      placeholder: \"Enter email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Username\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"email\",\n      value: email,\n      onChange: handleEmailChange,\n      placeholder: \"Enter email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: emailMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      value: newPassword,\n      onChange: handlePasswordChange,\n      placeholder: \"Enter new password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: newPasswordMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: newPasswordMsgCharacters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Confirm Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      value: confirmedPassword,\n      onChange: handleConfPasswordChange,\n      placeholder: \"Re-enter password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: confirmedPasswordMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"remember-me\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Would you like to enable 2 factor authentication?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        id: \"remember\",\n        checked: showTwoFactor,\n        onChange: handleCheckboxChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"remember\",\n        children: \"Enable 2 factor Authentication\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }, this), showTwoFactor && /*#__PURE__*/_jsxDEV(TwoFactor, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Already have an account?\", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addRegisteredUser(email, username, newPassword),\n        disabled: isButtonDisabled,\n        children: \"Create Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"refreshButton\",\n        type: \"refresh\",\n        children: \"Refresh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 316,\n    columnNumber: 5\n  }, this);\n}\n_s(Registration, \"3jJu7jowfftBqfUZGcg9kR1tPpE=\");\n_c = Registration;\nexport default Registration;\nvar _c;\n$RefreshReg$(_c, \"Registration\");","map":{"version":3,"names":["useState","TwoFactor","Link","registeredUsers","jsxDEV","_jsxDEV","Registration","_s","addRegisteredUser","email","username","password","response","fetch","method","headers","body","JSON","stringify","emailAddress","data","json","ok","console","log","message","user_id","setRegisterMessage","error","setEmail","emailMsg","setEmailMsg","showTwoFactor","setShowTwoFactor","newPassword","setNewPassword","newPasswordMsg","setNewPasswordMsg","newPasswordMsgCharacters","setNewPasswordMsgCharacters","confirmedPassword","setConfirmedPassword","confirmedPasswordMsg","setConfirmedPasswordMsg","isButtonDisabled","setIsButtonDisabled","registerMessage","uppercase","lowercase","numbers","symbols","apply","arr","val","a","includes","rightFormat","emailRegex","test","handleEmailChange","event","target","value","handlePasswordChange","booleans","length","handleConfPasswordChange","handleCheckboxChange","checked","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","placeholder","htmlFor","to","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/ivan/mental-health/app/src/Registration.js"],"sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\nimport TwoFactor from \"./Two-Factor.js\";\nimport { Link } from \"react-router-dom\";\nimport { registeredUsers } from \"./RegisteredUsers.js\";\n\n\n\nfunction Registration() {\n  {\n    /* State variable for email. */\n  }\n\n  const addRegisteredUser = async (email, username, password) => {\n    try {\n      const response = await fetch('/register_user', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: emailAddress,\n          username: emailAddress, // Using email as username for simplicity\n          password: password\n        }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        console.log('User registered successfully:', data.message);\n        console.log('User ID:', data.user_id);\n        setRegisterMessage(\"Registration successful! You can now login.\");\n        // You might want to redirect the user or update the UI here\n      } else {\n        console.error('Registration failed:', data.error);\n        setRegisterMessage(data.error || \"Registration failed. Please try again.\");\n      }\n    } catch (error) {\n      console.error('An error occurred:', error);\n      setRegisterMessage(\"An error occurred. Please try again later.\");\n    }\n  };\n  \n  const [email, setEmail] = useState(\"\");\n\n  {\n    /* State variable for email message. */\n  }\n  const [emailMsg, setEmailMsg] = useState(\n    \"Email needs to have a prefix, @, domain and then .edu.\"\n  );\n\n  {\n    /* State variable for two factor. */\n  }\n  const [showTwoFactor, setShowTwoFactor] = useState(\"\");\n\n  {\n    /* State variable for the new password created. */\n  }\n  const [newPassword, setNewPassword] = useState(\"\");\n\n  {\n    /* State variable for the new password message. Length needs to be at least 12 characters.  */\n  }\n  const [newPasswordMsg, setNewPasswordMsg] = useState(\n    \"Length needs to be at least 12 characters.\"\n  );\n\n  {\n    /* State variable for the new password message to make sure that it consists of uppercase, lowercase, numbers, and symbols.  */\n  }\n  const [newPasswordMsgCharacters, setNewPasswordMsgCharacters] = useState(\n    \"Needs to contains uppercase and lowercase characters, numbers, and symbols.\"\n  );\n\n  {\n    /* State variable for the confirmed password.  */\n  }\n  const [confirmedPassword, setConfirmedPassword] = useState(\"\");\n\n  {\n    /* State variable to ensure that the confirmed password is the same as the new password.  */\n  }\n  const [confirmedPasswordMsg, setConfirmedPasswordMsg] = useState(\n    \"Password should be the same as the original.\"\n  );\n\n  {\n    /* State variable for enabling and disabling the button to create the new account assuming that the new password as well as the confirmed password are both the same. */\n  }\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n\n  {\n    /* Register message */\n  }\n  const [registerMessage, setRegisterMessage] = useState(\"\");\n\n  {\n    /* Uppercase letters */\n  }\n  const uppercase = [\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n  ];\n\n  {\n    /* Lowercase letters */\n  }\n  const lowercase = [\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n  ];\n\n  {\n    /* Numbers */\n  }\n  const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  {\n    /* Symbols */\n  }\n  const symbols = [\n    \"@\",\n    \"#\",\n    \"$\",\n    \"%\",\n    \"&\",\n    \"*\",\n    \"!\",\n    \"?\",\n    \"^\",\n    \"~\",\n    \"|\",\n    \"_\",\n    \"+\",\n    \"-\",\n    \"=\",\n    \"<\",\n    \">\",\n    \"×\",\n    \"÷\",\n    \"√\",\n    \"∞\",\n    \"±\",\n    \"≠\",\n    \"≈\",\n    \"∑\",\n    \"∫\",\n    \"π\",\n    \"∆\",\n    \"∂\",\n    \"€\",\n    \"£\",\n    \"¥\",\n    \"₹\",\n    \"₽\",\n    \"₩\",\n    \"₫\",\n    \"₦\",\n    \".\",\n    \",\",\n    \";\",\n    \":\",\n    \"'\",\n    '\"',\n    \"(\",\n    \")\",\n    \"[\",\n    \"]\",\n  ];\n\n  {\n    /* Checks to make sure that the password contains an element from an array. */\n  }\n  function apply(arr, val) {\n    for (let a of arr) {\n      if (val.includes(a)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  {\n    /* Regex expression for ensuring that the email is in the right format. */\n  }\n  function rightFormat(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n  {\n    /* Sets emails to target values. */\n  }\n  const handleEmailChange = (event) => {\n    setEmail(event.target.value);\n    setEmailMsg(\n      !rightFormat(event.target.value)\n        ? \"Email needs to have a prefix, @, domain and then .edu.\"\n        : \"\"\n    );\n  };\n\n  {\n    /* Updates the new password message for character check and length check as and when the user is adding a new password. */\n  }\n  const handlePasswordChange = (event) => {\n    {\n      /* Takes in the value. */\n    }\n    const value = event.target.value;\n    {\n      /* Apply function is created for symbols, uppercase, lowercase and numbers. For each apply function, a check happens to make sure that at least one of each: uppercase, lowercase, symbol, and numbers are present. */\n    }\n    const booleans = [\n      apply(symbols, value),\n      apply(uppercase, value),\n      apply(lowercase, value),\n      apply(numbers, value),\n    ];\n    {\n      /* Setting the new password, the new password length check message, as well as the new password character check message. */\n    }\n    setNewPassword(value);\n    setNewPasswordMsg(\n      value.length < 12 ? \"Length needs to be at least 12 characters.\" : \"\"\n    );\n    setNewPasswordMsgCharacters(\n      booleans.includes(false)\n        ? \"Needs to contains uppercase and lowercase characters, numbers, and symbols.\"\n        : \"\"\n    );\n  };\n  const handleConfPasswordChange = (event) => {\n    {\n      /* Takes in the value. */\n    }\n    const value = event.target.value;\n    {\n      /* Sets the confirmed password and message depending on whether the confirm password is the same as the new password. */\n    }\n    setConfirmedPassword(value);\n    setConfirmedPasswordMsg(\n      value !== newPassword\n        ? \"Password should be the same as the original.\"\n        : \"All set. Have fun.\"\n    );\n    console.log(value + \"::\" + newPassword + \"::::\" + value !== newPassword);\n    {\n      /* Enables button if message says \"All set. Have fun.\". Else, keep the button disabled. */\n    }\n    setIsButtonDisabled(value !== newPassword && emailMsg === \"\");\n  };\n\n  {\n    /* Shows the two factors only if the checkbox has been entered. */\n  }\n  const handleCheckboxChange = (event) => {\n    setShowTwoFactor(event.target.checked);\n  };\n\n  {\n    /* Adds a new user to the list of registered users, but does not if they are an existing user. */\n  }\n\n\n  return (\n    <div className=\"form-input\">\n      {/* Creates an account and gives space for username and password. */}\n      <h1 className=\"title\">Create an Account</h1>\n      <h3>Please create a username and password.</h3>\n      <label>Email</label>\n      <input\n        type=\"text\"\n        id=\"email\"\n        value={email}\n        onChange={handleEmailChange}\n        placeholder=\"Enter email\"\n      />\n      <label>Username</label>\n      <input\n        type=\"text\"\n        id=\"email\"\n        value={email}\n        onChange={handleEmailChange}\n        placeholder=\"Enter email\"\n      />\n      \n      \n      <p>{emailMsg}</p>\n      <label>Password</label>\n      <input\n        type=\"password\"\n        value={newPassword}\n        onChange={handlePasswordChange}\n        placeholder=\"Enter new password\"\n      />\n      <p>{newPasswordMsg}</p>\n      <p>{newPasswordMsgCharacters}</p>\n      <label>Confirm Password</label>\n      <input\n        type=\"password\"\n        value={confirmedPassword}\n        onChange={handleConfPasswordChange}\n        placeholder=\"Re-enter password\"\n      />\n      <p>{confirmedPasswordMsg}</p>\n      <div className=\"remember-me\">\n        {/* Basically asks you for two-factor authentication. */}\n        <p>Would you like to enable 2 factor authentication?</p>\n        <input\n          type=\"checkbox\"\n          id=\"remember\"\n          checked={showTwoFactor}\n          onChange={handleCheckboxChange}\n        />\n        {/* If checked, gives you a label to enable two factor authentication. */}\n        <label htmlFor=\"remember\">Enable 2 factor Authentication</label>\n      </div>\n      {/* Shows two factor only if two factor has been set to true. */}\n      {showTwoFactor && <TwoFactor />}\n      <div className=\"login\">\n        {/* Gives you a chance to login if you already have the given account. */}\n        <span>\n          Already have an account?<Link to=\"/\">Login</Link>\n        </span>\n      </div>\n      <div id=\"buttons\">\n        {/* Gives you chance to create account. */}\n        <button\n          onClick={() => addRegisteredUser(email, username, newPassword)}\n          disabled={isButtonDisabled}\n        >\n          Create Account\n        </button>\n        {/* Gives you chance to refresh if login is being done. */}\n        <button id=\"refreshButton\" type=\"refresh\">\n          Refresh\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Registration;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}