{"ast":null,"code":"var _jsxFileName = \"/Users/ivan/mental-health/app/src/Registration.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport TwoFactor from \"./Two-Factor.js\";\nimport { Link } from \"react-router-dom\";\nimport { registeredUsers } from \"./RegisteredUsers.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Registration() {\n  _s();\n  {\n    /* State variable for email. */\n  }\n  const [email, setEmail] = useState(\"\");\n  {\n    /* State variable for email message. */\n  }\n  const [emailMsg, setEmailMsg] = useState(\"Email needs to have a prefix, @, domain and then .edu.\");\n  {\n    /* State variable for two factor. */\n  }\n  const [showTwoFactor, setShowTwoFactor] = useState(\"\");\n  {\n    /* State variable for the new password created. */\n  }\n  const [newPassword, setNewPassword] = useState(\"\");\n  {\n    /* State variable for the new password message. Length needs to be at least 12 characters.  */\n  }\n  const [newPasswordMsg, setNewPasswordMsg] = useState(\"Length needs to be at least 12 characters.\");\n  {\n    /* State variable for the new password message to make sure that it consists of uppercase, lowercase, numbers, and symbols.  */\n  }\n  const [newPasswordMsgCharacters, setNewPasswordMsgCharacters] = useState(\"Needs to contains uppercase and lowercase characters, numbers, and symbols.\");\n  {\n    /* State variable for the confirmed password.  */\n  }\n  const [confirmedPassword, setConfirmedPassword] = useState(\"\");\n  {\n    /* State variable to ensure that the confirmed password is the same as the new password.  */\n  }\n  const [confirmedPasswordMsg, setConfirmedPasswordMsg] = useState(\"Password should be the same as the original.\");\n  {\n    /* State variable for enabling and disabling the button to create the new account assuming that the new password as well as the confirmed password are both the same. */\n  }\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  {\n    /* Register message */\n  }\n  const [registerMessage, setRegisterMessage] = useState(\"\");\n  {\n    /* Uppercase letters */\n  }\n  const uppercase = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n  {\n    /* Lowercase letters */\n  }\n  const lowercase = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  {\n    /* Numbers */\n  }\n  const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  {\n    /* Symbols */\n  }\n  const symbols = [\"@\", \"#\", \"$\", \"%\", \"&\", \"*\", \"!\", \"?\", \"^\", \"~\", \"|\", \"_\", \"+\", \"-\", \"=\", \"<\", \">\", \"×\", \"÷\", \"√\", \"∞\", \"±\", \"≠\", \"≈\", \"∑\", \"∫\", \"π\", \"∆\", \"∂\", \"€\", \"£\", \"¥\", \"₹\", \"₽\", \"₩\", \"₫\", \"₦\", \".\", \",\", \";\", \":\", \"'\", '\"', \"(\", \")\", \"[\", \"]\"];\n  {\n    /* Checks to make sure that the password contains an element from an array. */\n  }\n  function apply(arr, val) {\n    for (let a of arr) {\n      if (val.includes(a)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  {\n    /* Regex expression for ensuring that the email is in the right format. */\n  }\n  function rightFormat(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n  {\n    /* Sets emails to target values. */\n  }\n  const handleEmailChange = event => {\n    setEmail(event.target.value);\n    setEmailMsg(!rightFormat(event.target.value) ? \"Email needs to have a prefix, @, domain and then .edu.\" : \"\");\n  };\n  {\n    /* Updates the new password message for character check and length check as and when the user is adding a new password. */\n  }\n  const handlePasswordChange = event => {\n    {\n      /* Takes in the value. */\n    }\n    const value = event.target.value;\n    {\n      /* Apply function is created for symbols, uppercase, lowercase and numbers. For each apply function, a check happens to make sure that at least one of each: uppercase, lowercase, symbol, and numbers are present. */\n    }\n    const booleans = [apply(symbols, value), apply(uppercase, value), apply(lowercase, value), apply(numbers, value)];\n    {\n      /* Setting the new password, the new password length check message, as well as the new password character check message. */\n    }\n    setNewPassword(value);\n    setNewPasswordMsg(value.length < 12 ? \"Length needs to be at least 12 characters.\" : \"\");\n    setNewPasswordMsgCharacters(booleans.includes(false) ? \"Needs to contains uppercase and lowercase characters, numbers, and symbols.\" : \"\");\n  };\n  const handleConfPasswordChange = event => {\n    {\n      /* Takes in the value. */\n    }\n    const value = event.target.value;\n    {\n      /* Sets the confirmed password and message depending on whether the confirm password is the same as the new password. */\n    }\n    setConfirmedPassword(value);\n    setConfirmedPasswordMsg(value !== newPassword ? \"Password should be the same as the original.\" : \"All set. Have fun.\");\n    console.log(value + \"::\" + newPassword + \"::::\" + value !== newPassword);\n    {\n      /* Enables button if message says \"All set. Have fun.\". Else, keep the button disabled. */\n    }\n    setIsButtonDisabled(value !== newPassword && emailMsg === \"\");\n  };\n  {\n    /* Shows the two factors only if the checkbox has been entered. */\n  }\n  const handleCheckboxChange = event => {\n    setShowTwoFactor(event.target.checked);\n  };\n  {\n    /* Adds a new user to the list of registered users, but does not if they are an existing user. */\n  }\n  const addRegisteredUser = (emailAddress, password) => {\n    let userExists = false;\n    for (let i = 0; i < registeredUsers.length; i++) {\n      for (const [email, pass] of Object.entries(registeredUsers[i])) {\n        if (email === emailAddress) {\n          userExists = true;\n          alert(\"This user currently exists. Please use the Login page.\"); // Alerts when the user already exists.\n        }\n      }\n    }\n    if (!userExists) {\n      registeredUsers.push({\n        [emailAddress]: password\n      }); // Adds the new user to the list.\n      console.log(registeredUsers);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-input\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Create an Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Please create a username and password.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"email\",\n      value: email,\n      onChange: handleEmailChange,\n      placeholder: \"Enter email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: emailMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      value: newPassword,\n      onChange: handlePasswordChange,\n      placeholder: \"Enter new password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: newPasswordMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: newPasswordMsgCharacters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Confirm Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      value: confirmedPassword,\n      onChange: handleConfPasswordChange,\n      placeholder: \"Re-enter password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: confirmedPasswordMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"remember-me\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Would you like to enable 2 factor authentication?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        id: \"remember\",\n        checked: showTwoFactor,\n        onChange: handleCheckboxChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"remember\",\n        children: \"Enable 2 factor Authentication\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this), showTwoFactor && /*#__PURE__*/_jsxDEV(TwoFactor, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Already have an account?\", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addRegisteredUser(email, newPassword),\n        disabled: isButtonDisabled,\n        children: \"Create Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"refreshButton\",\n        type: \"refresh\",\n        children: \"Refresh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 296,\n    columnNumber: 5\n  }, this);\n}\n_s(Registration, \"3jJu7jowfftBqfUZGcg9kR1tPpE=\");\n_c = Registration;\nexport default Registration;\nvar _c;\n$RefreshReg$(_c, \"Registration\");","map":{"version":3,"names":["useState","TwoFactor","Link","registeredUsers","jsxDEV","_jsxDEV","Registration","_s","email","setEmail","emailMsg","setEmailMsg","showTwoFactor","setShowTwoFactor","newPassword","setNewPassword","newPasswordMsg","setNewPasswordMsg","newPasswordMsgCharacters","setNewPasswordMsgCharacters","confirmedPassword","setConfirmedPassword","confirmedPasswordMsg","setConfirmedPasswordMsg","isButtonDisabled","setIsButtonDisabled","registerMessage","setRegisterMessage","uppercase","lowercase","numbers","symbols","apply","arr","val","a","includes","rightFormat","emailRegex","test","handleEmailChange","event","target","value","handlePasswordChange","booleans","length","handleConfPasswordChange","console","log","handleCheckboxChange","checked","addRegisteredUser","emailAddress","password","userExists","i","pass","Object","entries","alert","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","placeholder","htmlFor","to","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/ivan/mental-health/app/src/Registration.js"],"sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\nimport TwoFactor from \"./Two-Factor.js\";\nimport { Link } from \"react-router-dom\";\nimport { registeredUsers } from \"./RegisteredUsers.js\";\n\nfunction Registration() {\n  {\n    /* State variable for email. */\n  }\n  const [email, setEmail] = useState(\"\");\n\n  {\n    /* State variable for email message. */\n  }\n  const [emailMsg, setEmailMsg] = useState(\n    \"Email needs to have a prefix, @, domain and then .edu.\"\n  );\n\n  {\n    /* State variable for two factor. */\n  }\n  const [showTwoFactor, setShowTwoFactor] = useState(\"\");\n\n  {\n    /* State variable for the new password created. */\n  }\n  const [newPassword, setNewPassword] = useState(\"\");\n\n  {\n    /* State variable for the new password message. Length needs to be at least 12 characters.  */\n  }\n  const [newPasswordMsg, setNewPasswordMsg] = useState(\n    \"Length needs to be at least 12 characters.\"\n  );\n\n  {\n    /* State variable for the new password message to make sure that it consists of uppercase, lowercase, numbers, and symbols.  */\n  }\n  const [newPasswordMsgCharacters, setNewPasswordMsgCharacters] = useState(\n    \"Needs to contains uppercase and lowercase characters, numbers, and symbols.\"\n  );\n\n  {\n    /* State variable for the confirmed password.  */\n  }\n  const [confirmedPassword, setConfirmedPassword] = useState(\"\");\n\n  {\n    /* State variable to ensure that the confirmed password is the same as the new password.  */\n  }\n  const [confirmedPasswordMsg, setConfirmedPasswordMsg] = useState(\n    \"Password should be the same as the original.\"\n  );\n\n  {\n    /* State variable for enabling and disabling the button to create the new account assuming that the new password as well as the confirmed password are both the same. */\n  }\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n\n  {\n    /* Register message */\n  }\n  const [registerMessage, setRegisterMessage] = useState(\"\");\n\n  {\n    /* Uppercase letters */\n  }\n  const uppercase = [\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n  ];\n\n  {\n    /* Lowercase letters */\n  }\n  const lowercase = [\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n  ];\n\n  {\n    /* Numbers */\n  }\n  const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  {\n    /* Symbols */\n  }\n  const symbols = [\n    \"@\",\n    \"#\",\n    \"$\",\n    \"%\",\n    \"&\",\n    \"*\",\n    \"!\",\n    \"?\",\n    \"^\",\n    \"~\",\n    \"|\",\n    \"_\",\n    \"+\",\n    \"-\",\n    \"=\",\n    \"<\",\n    \">\",\n    \"×\",\n    \"÷\",\n    \"√\",\n    \"∞\",\n    \"±\",\n    \"≠\",\n    \"≈\",\n    \"∑\",\n    \"∫\",\n    \"π\",\n    \"∆\",\n    \"∂\",\n    \"€\",\n    \"£\",\n    \"¥\",\n    \"₹\",\n    \"₽\",\n    \"₩\",\n    \"₫\",\n    \"₦\",\n    \".\",\n    \",\",\n    \";\",\n    \":\",\n    \"'\",\n    '\"',\n    \"(\",\n    \")\",\n    \"[\",\n    \"]\",\n  ];\n\n  {\n    /* Checks to make sure that the password contains an element from an array. */\n  }\n  function apply(arr, val) {\n    for (let a of arr) {\n      if (val.includes(a)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  {\n    /* Regex expression for ensuring that the email is in the right format. */\n  }\n  function rightFormat(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n  {\n    /* Sets emails to target values. */\n  }\n  const handleEmailChange = (event) => {\n    setEmail(event.target.value);\n    setEmailMsg(\n      !rightFormat(event.target.value)\n        ? \"Email needs to have a prefix, @, domain and then .edu.\"\n        : \"\"\n    );\n  };\n\n  {\n    /* Updates the new password message for character check and length check as and when the user is adding a new password. */\n  }\n  const handlePasswordChange = (event) => {\n    {\n      /* Takes in the value. */\n    }\n    const value = event.target.value;\n    {\n      /* Apply function is created for symbols, uppercase, lowercase and numbers. For each apply function, a check happens to make sure that at least one of each: uppercase, lowercase, symbol, and numbers are present. */\n    }\n    const booleans = [\n      apply(symbols, value),\n      apply(uppercase, value),\n      apply(lowercase, value),\n      apply(numbers, value),\n    ];\n    {\n      /* Setting the new password, the new password length check message, as well as the new password character check message. */\n    }\n    setNewPassword(value);\n    setNewPasswordMsg(\n      value.length < 12 ? \"Length needs to be at least 12 characters.\" : \"\"\n    );\n    setNewPasswordMsgCharacters(\n      booleans.includes(false)\n        ? \"Needs to contains uppercase and lowercase characters, numbers, and symbols.\"\n        : \"\"\n    );\n  };\n  const handleConfPasswordChange = (event) => {\n    {\n      /* Takes in the value. */\n    }\n    const value = event.target.value;\n    {\n      /* Sets the confirmed password and message depending on whether the confirm password is the same as the new password. */\n    }\n    setConfirmedPassword(value);\n    setConfirmedPasswordMsg(\n      value !== newPassword\n        ? \"Password should be the same as the original.\"\n        : \"All set. Have fun.\"\n    );\n    console.log(value + \"::\" + newPassword + \"::::\" + value !== newPassword);\n    {\n      /* Enables button if message says \"All set. Have fun.\". Else, keep the button disabled. */\n    }\n    setIsButtonDisabled(value !== newPassword && emailMsg === \"\");\n  };\n\n  {\n    /* Shows the two factors only if the checkbox has been entered. */\n  }\n  const handleCheckboxChange = (event) => {\n    setShowTwoFactor(event.target.checked);\n  };\n\n  {\n    /* Adds a new user to the list of registered users, but does not if they are an existing user. */\n  }\n  const addRegisteredUser = (emailAddress, password) => {\n    let userExists = false;\n    for (let i = 0; i < registeredUsers.length; i++) {\n      for (const [email, pass] of Object.entries(registeredUsers[i])) {\n        if (email === emailAddress) {\n          userExists = true;\n          alert(\"This user currently exists. Please use the Login page.\"); // Alerts when the user already exists.\n        }\n      }\n    }\n    if (!userExists) {\n      registeredUsers.push({ [emailAddress]: password }); // Adds the new user to the list.\n      console.log(registeredUsers);\n    }\n  };\n\n  return (\n    <div className=\"form-input\">\n      {/* Creates an account and gives space for username and password. */}\n      <h1 className=\"title\">Create an Account</h1>\n      <h3>Please create a username and password.</h3>\n      <label>Email</label>\n      <input\n        type=\"text\"\n        id=\"email\"\n        value={email}\n        onChange={handleEmailChange}\n        placeholder=\"Enter email\"\n      />\n      <p>{emailMsg}</p>\n      <label>Password</label>\n      <input\n        type=\"password\"\n        value={newPassword}\n        onChange={handlePasswordChange}\n        placeholder=\"Enter new password\"\n      />\n      <p>{newPasswordMsg}</p>\n      <p>{newPasswordMsgCharacters}</p>\n      <label>Confirm Password</label>\n      <input\n        type=\"password\"\n        value={confirmedPassword}\n        onChange={handleConfPasswordChange}\n        placeholder=\"Re-enter password\"\n      />\n      <p>{confirmedPasswordMsg}</p>\n      <div className=\"remember-me\">\n        {/* Basically asks you for two-factor authentication. */}\n        <p>Would you like to enable 2 factor authentication?</p>\n        <input\n          type=\"checkbox\"\n          id=\"remember\"\n          checked={showTwoFactor}\n          onChange={handleCheckboxChange}\n        />\n        {/* If checked, gives you a label to enable two factor authentication. */}\n        <label htmlFor=\"remember\">Enable 2 factor Authentication</label>\n      </div>\n      {/* Shows two factor only if two factor has been set to true. */}\n      {showTwoFactor && <TwoFactor />}\n      <div className=\"login\">\n        {/* Gives you a chance to login if you already have the given account. */}\n        <span>\n          Already have an account?<Link to=\"/\">Login</Link>\n        </span>\n      </div>\n      <div id=\"buttons\">\n        {/* Gives you chance to create account. */}\n        <button\n          onClick={() => addRegisteredUser(email, newPassword)}\n          disabled={isButtonDisabled}\n        >\n          Create Account\n        </button>\n        {/* Gives you chance to refresh if login is being done. */}\n        <button id=\"refreshButton\" type=\"refresh\">\n          Refresh\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Registration;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}