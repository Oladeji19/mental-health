{"ast":null,"code":"var _jsxFileName = \"/Users/nathanfernandez/mental-health/app/src/ForgotPassword.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport { Link } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { registeredUsers } from \"./RegisteredUsers.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ForgotPassword() {\n  _s();\n  {\n    /* State variable for email. */\n  }\n  const [email, setEmail] = useState(\"\");\n  {\n    /* State variable for the new password created. */\n  }\n  const [newPassword, setNewPassword] = useState(\"\");\n  {\n    /* State variable for the new password message. Length needs to be at least 12 characters.  */\n  }\n  const [newPasswordMsg, setNewPasswordMsg] = useState(\"Length needs to be at least 12 characters.\");\n  {\n    /* State variable for the new password message to make sure that it consists of uppercase, lowercase, numbers, and symbols.  */\n  }\n  const [newPasswordMsgCharacters, setNewPasswordMsgCharacters] = useState(\"Needs to contains uppercase and lowercase characters, numbers, and symbols.\");\n  {\n    /* State variable for the confirmed password.  */\n  }\n  const [confirmedPassword, setConfirmedPassword] = useState(\"\");\n  {\n    /* State variable to ensure that the confirmed password is the same as the new password.  */\n  }\n  const [confirmedPasswordMsg, setConfirmedPasswordMsg] = useState(\"Password should be the same as the original.\");\n  {\n    /* State variable for enabling and disabling the button to create the new account assuming that the new password as well as the confirmed password are both the same. */\n  }\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  {\n    /* Uppercase letters */\n  }\n  const uppercase = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n  {\n    /* Lowercase letters */\n  }\n  const lowercase = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  {\n    /* Numbers */\n  }\n  const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  {\n    /* Symbols */\n  }\n  const symbols = [\"@\", \"#\", \"$\", \"%\", \"&\", \"*\", \"!\", \"?\", \"^\", \"~\", \"|\", \"_\", \"+\", \"-\", \"=\", \"<\", \">\", \"×\", \"÷\", \"√\", \"∞\", \"±\", \"≠\", \"≈\", \"∑\", \"∫\", \"π\", \"∆\", \"∂\", \"€\", \"£\", \"¥\", \"₹\", \"₽\", \"₩\", \"₫\", \"₦\", \".\", \",\", \";\", \":\", \"'\", '\"', \"(\", \")\", \"[\", \"]\"];\n  {\n    /* Checks to make sure that the password contains an element from an array. */\n  }\n  function apply(arr, val) {\n    for (let a of arr) {\n      if (val.includes(a)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  {\n    /* Updates the email address change when the user is entering their email. */\n  }\n  const handleEmailChange = event => {\n    setEmail(event.target.value);\n  };\n  {\n    /* Updates the new password message for character check and length check as and when the user is adding a new password. */\n  }\n  const handlePasswordChange = event => {\n    {\n      /* Takes in the value. */\n    }\n    const value = event.target.value;\n    {\n      /* Apply function is created for symbols, uppercase, lowercase and numbers. For each apply function, a check happens to make sure that at least one of each: uppercase, lowercase, symbol, and numbers are present. */\n    }\n    const booleans = [apply(symbols, value), apply(uppercase, value), apply(lowercase, value), apply(numbers, value)];\n    {\n      /* Setting the new password, the new password length check message, as well as the new password character check message. */\n    }\n    setNewPassword(value);\n    setNewPasswordMsg(value.length < 12 ? \"Length needs to be at least 12 characters.\" : \"\");\n    setNewPasswordMsgCharacters(booleans.includes(false) ? \"Needs to contains uppercase and lowercase characters, numbers, and symbols.\" : \"\");\n  };\n  const handleConfPasswordChange = event => {\n    {\n      /* Takes in the value. */\n    }\n    const value = event.target.value;\n    {\n      /* Sets the confirmed password and message depending on whether the confirm password is the same as the new password. */\n    }\n    setConfirmedPassword(value);\n    setConfirmedPasswordMsg(value !== newPassword ? \"Password should be the same as the original.\" : \"All set. Have fun.\");\n    console.log(confirmedPasswordMsg !== \"All set. Have fun.\");\n    {\n      /* Enables button if message says \"All set. Have fun.\". Else, keep the button disabled. */\n    }\n    setIsButtonDisabled(value != newPassword);\n  };\n  {\n    /* Creates the state variable to show password. */\n  }\n  const [showPassword, setShowPassword] = useState(false);\n  {\n    /* Toggling the show password. */\n  }\n  const toggleShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n  {\n    /* Changes the password. */\n  }\n  const changePassword = (emailAddress, newPass) => {\n    for (let i = 0; i < registeredUsers.length; i++) {\n      for (const [email, pass] of Object.entries(registeredUsers[i])) {\n        if (email === emailAddress) {\n          console.log(\"correct address\");\n          console.log(\"Old credentials:\", registeredUsers[i]);\n          if (pass === newPass) {\n            alert(\"This new password is the same as the old password. Enter a new password.\");\n            return;\n          }\n          registeredUsers[i][email] = newPass;\n          console.log(\"New credentials:\", registeredUsers[i]);\n          alert(\"Password changed.\");\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-input\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"forget-password\",\n      children: \"Forgot Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please enter your email.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      value: email,\n      onChange: handleEmailChange,\n      placeholder: \"Enter your email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please enter new password.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"New Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      value: newPassword,\n      onChange: handlePasswordChange,\n      placeholder: \"Enter new password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: newPasswordMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: newPasswordMsgCharacters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Confirm New Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      value: confirmedPassword,\n      onChange: handleConfPasswordChange,\n      placeholder: \"Re-enter password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: confirmedPasswordMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isButtonDisabled,\n      onClick: () => changePassword(email, newPassword),\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      children: \"Click here to go back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n}\n_s(ForgotPassword, \"9nuyz+WFXYy5qd89Y/nZSaqPt4I=\");\n_c = ForgotPassword;\nexport default ForgotPassword;\nvar _c;\n$RefreshReg$(_c, \"ForgotPassword\");","map":{"version":3,"names":["Link","useState","registeredUsers","jsxDEV","_jsxDEV","ForgotPassword","_s","email","setEmail","newPassword","setNewPassword","newPasswordMsg","setNewPasswordMsg","newPasswordMsgCharacters","setNewPasswordMsgCharacters","confirmedPassword","setConfirmedPassword","confirmedPasswordMsg","setConfirmedPasswordMsg","isButtonDisabled","setIsButtonDisabled","uppercase","lowercase","numbers","symbols","apply","arr","val","a","includes","handleEmailChange","event","target","value","handlePasswordChange","booleans","length","handleConfPasswordChange","console","log","showPassword","setShowPassword","toggleShowPassword","changePassword","emailAddress","newPass","i","pass","Object","entries","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","disabled","onClick","to","_c","$RefreshReg$"],"sources":["/Users/nathanfernandez/mental-health/app/src/ForgotPassword.js"],"sourcesContent":["import \"./App.css\";\nimport { Link } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { registeredUsers } from \"./RegisteredUsers.js\";\n\nfunction ForgotPassword() {\n  {\n    /* State variable for email. */\n  }\n  const [email, setEmail] = useState(\"\");\n\n  {\n    /* State variable for the new password created. */\n  }\n  const [newPassword, setNewPassword] = useState(\"\");\n\n  {\n    /* State variable for the new password message. Length needs to be at least 12 characters.  */\n  }\n  const [newPasswordMsg, setNewPasswordMsg] = useState(\n    \"Length needs to be at least 12 characters.\"\n  );\n\n  {\n    /* State variable for the new password message to make sure that it consists of uppercase, lowercase, numbers, and symbols.  */\n  }\n  const [newPasswordMsgCharacters, setNewPasswordMsgCharacters] = useState(\n    \"Needs to contains uppercase and lowercase characters, numbers, and symbols.\"\n  );\n\n  {\n    /* State variable for the confirmed password.  */\n  }\n  const [confirmedPassword, setConfirmedPassword] = useState(\"\");\n\n  {\n    /* State variable to ensure that the confirmed password is the same as the new password.  */\n  }\n  const [confirmedPasswordMsg, setConfirmedPasswordMsg] = useState(\n    \"Password should be the same as the original.\"\n  );\n\n  {\n    /* State variable for enabling and disabling the button to create the new account assuming that the new password as well as the confirmed password are both the same. */\n  }\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n\n  {\n    /* Uppercase letters */\n  }\n  const uppercase = [\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n  ];\n\n  {\n    /* Lowercase letters */\n  }\n  const lowercase = [\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n  ];\n\n  {\n    /* Numbers */\n  }\n  const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  {\n    /* Symbols */\n  }\n  const symbols = [\n    \"@\",\n    \"#\",\n    \"$\",\n    \"%\",\n    \"&\",\n    \"*\",\n    \"!\",\n    \"?\",\n    \"^\",\n    \"~\",\n    \"|\",\n    \"_\",\n    \"+\",\n    \"-\",\n    \"=\",\n    \"<\",\n    \">\",\n    \"×\",\n    \"÷\",\n    \"√\",\n    \"∞\",\n    \"±\",\n    \"≠\",\n    \"≈\",\n    \"∑\",\n    \"∫\",\n    \"π\",\n    \"∆\",\n    \"∂\",\n    \"€\",\n    \"£\",\n    \"¥\",\n    \"₹\",\n    \"₽\",\n    \"₩\",\n    \"₫\",\n    \"₦\",\n    \".\",\n    \",\",\n    \";\",\n    \":\",\n    \"'\",\n    '\"',\n    \"(\",\n    \")\",\n    \"[\",\n    \"]\",\n  ];\n\n  {\n    /* Checks to make sure that the password contains an element from an array. */\n  }\n  function apply(arr, val) {\n    for (let a of arr) {\n      if (val.includes(a)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  {\n    /* Updates the email address change when the user is entering their email. */\n  }\n  const handleEmailChange = (event) => {\n    setEmail(event.target.value);\n  };\n\n  {\n    /* Updates the new password message for character check and length check as and when the user is adding a new password. */\n  }\n  const handlePasswordChange = (event) => {\n    {\n      /* Takes in the value. */\n    }\n    const value = event.target.value;\n    {\n      /* Apply function is created for symbols, uppercase, lowercase and numbers. For each apply function, a check happens to make sure that at least one of each: uppercase, lowercase, symbol, and numbers are present. */\n    }\n    const booleans = [\n      apply(symbols, value),\n      apply(uppercase, value),\n      apply(lowercase, value),\n      apply(numbers, value),\n    ];\n    {\n      /* Setting the new password, the new password length check message, as well as the new password character check message. */\n    }\n    setNewPassword(value);\n    setNewPasswordMsg(\n      value.length < 12 ? \"Length needs to be at least 12 characters.\" : \"\"\n    );\n    setNewPasswordMsgCharacters(\n      booleans.includes(false)\n        ? \"Needs to contains uppercase and lowercase characters, numbers, and symbols.\"\n        : \"\"\n    );\n  };\n  const handleConfPasswordChange = (event) => {\n    {\n      /* Takes in the value. */\n    }\n    const value = event.target.value;\n    {\n      /* Sets the confirmed password and message depending on whether the confirm password is the same as the new password. */\n    }\n    setConfirmedPassword(value);\n    setConfirmedPasswordMsg(\n      value !== newPassword\n        ? \"Password should be the same as the original.\"\n        : \"All set. Have fun.\"\n    );\n    console.log(confirmedPasswordMsg !== \"All set. Have fun.\");\n    {\n      /* Enables button if message says \"All set. Have fun.\". Else, keep the button disabled. */\n    }\n    setIsButtonDisabled(value != newPassword);\n  };\n\n  {\n    /* Creates the state variable to show password. */\n  }\n  const [showPassword, setShowPassword] = useState(false);\n\n  {\n    /* Toggling the show password. */\n  }\n  const toggleShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  {\n    /* Changes the password. */\n  }\n  const changePassword = (emailAddress, newPass) => {\n    for (let i = 0; i < registeredUsers.length; i++) {\n      for (const [email, pass] of Object.entries(registeredUsers[i])) {\n        if (email === emailAddress) {\n          console.log(\"correct address\");\n          console.log(\"Old credentials:\", registeredUsers[i]);\n          if (pass === newPass) {\n            alert(\n              \"This new password is the same as the old password. Enter a new password.\"\n            );\n            return;\n          }\n          registeredUsers[i][email] = newPass;\n          console.log(\"New credentials:\", registeredUsers[i]);\n          alert(\"Password changed.\");\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"form-input\">\n      {/* Title for forgetting the password. */}\n      <h1 className=\"forget-password\">Forgot Password</h1>\n      {/* Allows you enter your email as well as a new password. */}\n      <p>Please enter your email.</p>\n      <input\n        type=\"email\"\n        value={email}\n        onChange={handleEmailChange}\n        placeholder=\"Enter your email\"\n      />\n      <p>Please enter new password.</p>\n      <br></br>\n      <label>New Password</label>\n      <input\n        type=\"password\"\n        value={newPassword}\n        onChange={handlePasswordChange}\n        placeholder=\"Enter new password\"\n      />\n      <br></br>\n      <p>{newPasswordMsg}</p>\n      <p>{newPasswordMsgCharacters}</p>\n      {/* Confirms the password. */}\n      <label>Confirm New Password</label>\n      <input\n        type=\"password\"\n        value={confirmedPassword}\n        onChange={handleConfPasswordChange}\n        placeholder=\"Re-enter password\"\n      />\n      <br></br>\n      <p>{confirmedPasswordMsg}</p>\n      {/* ALlows you to navigate to the registration page. */}\n      <button\n        disabled={isButtonDisabled}\n        onClick={() => changePassword(email, newPassword)}\n      >\n        Register\n      </button>\n      <br></br>\n      {/* Allows you to navigate back to the login page. */}\n      <Link to=\"/\">Click here to go back</Link>\n    </div>\n  );\n}\n\nexport default ForgotPassword;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}