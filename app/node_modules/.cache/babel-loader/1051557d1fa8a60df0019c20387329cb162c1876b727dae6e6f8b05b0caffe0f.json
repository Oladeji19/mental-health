{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kesha\\\\mental-health\\\\app\\\\src\\\\ForgotPassword.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport { Link } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ForgotPassword() {\n  _s();\n  {/* State variable for email. */}\n  {/* State variable for the new password created. */}\n  const [newPassword, setNewPassword] = useState(\"\");\n  {/* State variable for the new password message. Length needs to be at least 12 characters.  */}\n  const [newPasswordMsg, setNewPasswordMsg] = useState(\"Length needs to be at least 12 characters.\");\n  {/* State variable for the new password message to make sure that it consists of uppercase, lowercase, numbers, and symbols.  */}\n  const [newPasswordMsgCharacters, setNewPasswordMsgCharacters] = useState(\"Needs to contains uppercase and lowercase characters, numbers, and symbols.\");\n  {/* State variable for the confirmed password.  */}\n  const [confirmedPassword, setConfirmedPassword] = useState(\"\");\n  {/* State variable to ensure that the confirmed password is the same as the new password.  */}\n  const [confirmedPasswordMsg, setConfirmedPasswordMsg] = useState(\"Password should be the same as the original.\");\n  {/* State variable for enabling and disabling the button to create the new account assuming that the new password as well as the confirmed password are both the same. */}\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  {/* Uppercase letters */}\n  const uppercase = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n  {/* Lowercase letters */}\n  const lowercase = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  {/* Numbers */}\n  const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  {/* Symbols */}\n  const symbols = ['@', '#', '$', '%', '&', '*', '!', '?', '^', '~', '|', '_', '+', '-', '=', '<', '>', '×', '÷', '√', '∞', '±', '≠', '≈', '∑', '∫', 'π', '∆', '∂', '€', '£', '¥', '₹', '₽', '₩', '₫', '₦', '.', ',', ';', ':', '\\'', '\"', '(', ')', '[', ']'];\n  {/* Checks to make sure that the password contains an element from an array. */}\n  function apply(arr, val) {\n    for (let a of arr) {\n      if (val.includes(a)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  {/* Updates the new password message for character check and length check as and when the user is adding a new password. */}\n  const handlePasswordChange = event => {\n    {/* Takes in the value. */}\n    const value = event.target.value;\n    {/* Apply function is created for symbols, uppercase, lowercase and numbers. For each apply function, a check happens to make sure that at least one of each: uppercase, lowercase, symbol, and numbers are present. */}\n    const booleans = [apply(symbols, value), apply(uppercase, value), apply(lowercase, value), apply(numbers, value)];\n    {/* Setting the new password, the new password length check message, as well as the new password character check message. */}\n    setNewPassword(value);\n    setNewPasswordMsg(value.length < 12 ? \"Length needs to be at least 12 characters.\" : \"\");\n    setNewPasswordMsgCharacters(booleans.includes(false) ? \"Needs to contains uppercase and lowercase characters, numbers, and symbols.\" : \"\");\n  };\n  const handleConfPasswordChange = event => {\n    {/* Takes in the value. */}\n    const value = event.target.value;\n    {/* Sets the confirmed password and message depending on whether the confirm password is the same as the new password. */}\n    setConfirmedPassword(value);\n    setConfirmedPasswordMsg(value !== newPassword ? \"Password should be the same as the original.\" : \"All set. Have fun.\");\n    console.log(confirmedPasswordMsg !== \"All set. Have fun.\");\n    {/* Enables button if message says \"All set. Have fun.\". Else, keep the button disabled. */}\n    setIsButtonDisabled(value != newPassword);\n  };\n  {/* Creates the state variable to show password. */}\n  const [showPassword, setShowPassword] = useState(false);\n  {/* Toggling the show password. */}\n  const toggleShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-input\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"forget-password\",\n      children: \"Forgot Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please enter new password.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"New Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      value: newPassword,\n      onChange: handlePasswordChange,\n      placeholder: \"Enter new password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: newPasswordMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: newPasswordMsgCharacters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Confirm New Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      value: confirmedPassword,\n      onChange: handleConfPasswordChange,\n      placeholder: \"Re-enter password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: confirmedPasswordMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isButtonDisabled,\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      children: \"Click here to go back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(ForgotPassword, \"j1Mqj8XIhE8Frfrkuc+ErkkGCio=\");\n_c = ForgotPassword;\nexport default ForgotPassword;\nvar _c;\n$RefreshReg$(_c, \"ForgotPassword\");","map":{"version":3,"names":["Link","useState","jsxDEV","_jsxDEV","ForgotPassword","_s","newPassword","setNewPassword","newPasswordMsg","setNewPasswordMsg","newPasswordMsgCharacters","setNewPasswordMsgCharacters","confirmedPassword","setConfirmedPassword","confirmedPasswordMsg","setConfirmedPasswordMsg","isButtonDisabled","setIsButtonDisabled","uppercase","lowercase","numbers","symbols","apply","arr","val","a","includes","handlePasswordChange","event","value","target","booleans","length","handleConfPasswordChange","console","log","showPassword","setShowPassword","toggleShowPassword","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","disabled","to","_c","$RefreshReg$"],"sources":["C:/Users/kesha/mental-health/app/src/ForgotPassword.js"],"sourcesContent":["import \"./App.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\n\r\nfunction ForgotPassword() {\r\n  {/* State variable for email. */}\r\n  \r\n  {/* State variable for the new password created. */}\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n\r\n  {/* State variable for the new password message. Length needs to be at least 12 characters.  */}\r\n  const [newPasswordMsg, setNewPasswordMsg] = useState(\"Length needs to be at least 12 characters.\");\r\n\r\n  {/* State variable for the new password message to make sure that it consists of uppercase, lowercase, numbers, and symbols.  */}\r\n  const [newPasswordMsgCharacters, setNewPasswordMsgCharacters] = useState(\"Needs to contains uppercase and lowercase characters, numbers, and symbols.\");\r\n\r\n  {/* State variable for the confirmed password.  */}\r\n  const [confirmedPassword, setConfirmedPassword] = useState(\"\");\r\n\r\n  {/* State variable to ensure that the confirmed password is the same as the new password.  */}\r\n  const [confirmedPasswordMsg, setConfirmedPasswordMsg] = useState(\"Password should be the same as the original.\");\r\n\r\n  {/* State variable for enabling and disabling the button to create the new account assuming that the new password as well as the confirmed password are both the same. */}\r\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\r\n\r\n  {/* Uppercase letters */}\r\n  const uppercase = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', \r\n  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\r\n\r\n  {/* Lowercase letters */}\r\n  const lowercase = [  'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', \r\n    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\r\n\r\n  {/* Numbers */}\r\n  const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\n  {/* Symbols */}\r\n  const symbols = [\r\n    '@', '#', '$', '%', '&', '*', '!', '?', '^', '~', '|', '_', '+', '-', '=', \r\n    '<', '>', '×', '÷', '√', '∞', '±', '≠', '≈', '∑', '∫', 'π', '∆', '∂',\r\n    '€', '£', '¥', '₹', '₽', '₩', '₫', '₦',\r\n    '.', ',', ';', ':', '\\'', '\"', '(', ')', '[', ']'\r\n  ];\r\n\r\n  {/* Checks to make sure that the password contains an element from an array. */}\r\n  function apply(arr, val) {\r\n    for(let a of arr) {\r\n      if(val.includes(a)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  {/* Updates the new password message for character check and length check as and when the user is adding a new password. */}\r\n  const handlePasswordChange = (event) => {\r\n    {/* Takes in the value. */}\r\n    const value = event.target.value;\r\n    {/* Apply function is created for symbols, uppercase, lowercase and numbers. For each apply function, a check happens to make sure that at least one of each: uppercase, lowercase, symbol, and numbers are present. */}\r\n    const booleans = [apply(symbols, value), apply(uppercase, value), apply(lowercase, value), apply(numbers, value)]\r\n    {/* Setting the new password, the new password length check message, as well as the new password character check message. */}\r\n    setNewPassword(value);\r\n    setNewPasswordMsg(value.length < 12 ? \"Length needs to be at least 12 characters.\" : \"\");\r\n    setNewPasswordMsgCharacters(booleans.includes(false) ? \"Needs to contains uppercase and lowercase characters, numbers, and symbols.\" : \"\");\r\n  }\r\n  const handleConfPasswordChange = (event) => {\r\n    {/* Takes in the value. */}\r\n    const value = event.target.value;\r\n    {/* Sets the confirmed password and message depending on whether the confirm password is the same as the new password. */}\r\n    setConfirmedPassword(value);\r\n    setConfirmedPasswordMsg(value !== newPassword ? \"Password should be the same as the original.\" : \"All set. Have fun.\");\r\n    console.log(confirmedPasswordMsg !== \"All set. Have fun.\");\r\n    {/* Enables button if message says \"All set. Have fun.\". Else, keep the button disabled. */}\r\n    setIsButtonDisabled(value != newPassword);\r\n  }\r\n\r\n  {/* Creates the state variable to show password. */}\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  {/* Toggling the show password. */}\r\n  const toggleShowPassword = () => {\r\n    setShowPassword(!showPassword);\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-input\">\r\n      {/* Title for forgetting the password. */}\r\n      <h1 className=\"forget-password\">Forgot Password</h1>\r\n      {/* Allows you enter your email as well as a new password. */}\r\n      <p>Please enter new password.</p>\r\n      <br></br>\r\n      <label>New Password</label>\r\n      <input type=\"password\" value={newPassword} onChange={handlePasswordChange} placeholder=\"Enter new password\"/>\r\n      <br></br>\r\n      <p>{newPasswordMsg}</p>\r\n      <p>{newPasswordMsgCharacters}</p>\r\n      {/* Confirms the password. */}\r\n      <label>Confirm New Password</label>\r\n      <input type=\"password\" value={confirmedPassword} onChange={handleConfPasswordChange} placeholder=\"Re-enter password\" />\r\n      <br></br>\r\n      <p>{confirmedPasswordMsg}</p>\r\n      {/* ALlows you to navigate to the registration page. */}\r\n      <button disabled={isButtonDisabled}>Register</button>\r\n      <br></br>\r\n      {/* Allows you to navigate back to the login page. */}\r\n      <Link to=\"/\">Click here to go back</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ForgotPassword;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}